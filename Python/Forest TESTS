""" run the methods for Forest"""
'''
For every method we obtain the optimal vector (x,s), a dataframe with all sequences
time of the algorithm 
'''
if __name__ == "__main__":
    (A, b, c) = forest()
    """                                  Affine                                 """
    x_a, s_a , u_a = affine(A, b, -c, c_form = 1)
    dfu = cent_meas(x_a, u_a, label = 'Affine') # 29 it
    
    """                                   LPF1                                  """
    
    start = time.time()
    x_l, s_l, u_l = longpath1(A, b, -c, c_form = 1, info = 1)
    time_lpf1 = time.time()-start
    print('Time of the algorithm is {} \n\n'.format("%2.2e"%time_lpf1))
    
    dful = cent_meas(x_l, u_l, label = 'LPF', plot = 0) # 15 iterations
    
    """                                   LPF2                                  """
    
    start = time.time()
    x_c, s_c, u_c, sigma_l2 = longpath2(A, b, -c, c_form = 1, info = 1) # 15 it
    time_lpf2 = time.time()-start
    print('Time of the algorithm is {} \n\n'.format("%2.2e"%time_lpf2))
    
    dfc = cent_meas(x_c, u_c, label = 'LPF2', plot= 0)
    
    """                                LPF predictor corrector                  """
    
    start = time.time()
    x_pc, s_pc, u_pc, sigma_pc = longpathPC(A, b, -c, gamma = 0, c_form = 1,info = 1)
    time_lpfpc = time.time()-start
    print('Time of the algorithm is {} \n\n'.format("%2.2e"%time_lpfpc))
    
    dfpc = cent_meas(x_pc, u_pc, label = 'LPF PC', plot = 0) # 19 iterations
    
    """                                      Mehrotra                           """
    
    start = time.time()
    x_m, s_m, u_m, sigma_m = mehrotra(A, b, -c, c_form = 1, info = 1)
    time_mer = time.time()-start
    print('Time of the algorithm is {} \n\n'.format("%2.2e"%time_mer))
    dfm = cent_meas(x_m, u_m, label = 'Mehrotra', plot = 0) # 9 iterations
    
    P1, u = SimplexMethod(A, b, -c, rule = 0, c_form = 1) # 45 iterations

#plt.show()